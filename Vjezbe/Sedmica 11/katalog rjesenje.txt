#include<iostream>
using namespace std;

const char* crt = "\n------------------------------------\n";

char * AlocirajNizKaraktera(const char * sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);

	return temp;
}

class NedozvoljenaOperacija : public exception {
	int _linijaKoda;
public:
	NedozvoljenaOperacija(int linijaKoda, const char* poruka) : exception(poruka) {
		_linijaKoda = linijaKoda;
	}
	void Info() {
		cout << "Linija koda: " << _linijaKoda << endl;
		cout << what() << endl;
	}
};

template<class T>
class Kolekcija
{
	T* _elementi;
	int _trenutno;
public:
	//Kolekciju dopuniti u skladu sa potrebama zadatka
	Kolekcija()
	{
		_elementi = nullptr;
		_trenutno = 0;
	}
	~Kolekcija()
	{
		delete[] _elementi;
		_elementi = nullptr;
	}

	void AddElement(const T& el)
	{
		T* temp = new T[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
		{
			temp[i] = _elementi[i];
		}

		delete[] _elementi;
		_elementi = temp;

		_elementi[_trenutno++] = el;
	}

	int GetTrenutno()const { return _trenutno; }

	T& operator[](int index)
	{
		if (index < 0 || index >= _trenutno)
			throw NedozvoljenaOperacija(__LINE__, "Indeks nije validan.");//Slucajsno zamjenio prilikom implementacije

		return _elementi[index];
	}

	friend ostream& operator<<(ostream&, const Kolekcija&);
};

template<class T>
ostream& operator<<(ostream& cout, const Kolekcija<T>& kol)
{
	for (int i = 0; i < kol._trenutno; i++)
	{
		cout << kol._elementi[i] << endl;
	}

	return cout;
}

//Kataloška prodaja
class Proizvod
{
protected:
	char _sifra[10];
	char* _naziv;
	double _cijena;
	double _popust; //Izrazen procentualno
	int _kolicina; //Dostupno proizvoda
public:
	Proizvod() : _naziv(nullptr), _cijena(0), _popust(0), _kolicina(0) { _sifra[0] = '\0'; };

	//Konstruktor i destruktor funkcije
	Proizvod(const Proizvod& proizvod)
	{
		if (proizvod._sifra == nullptr || proizvod._naziv == nullptr || proizvod._kolicina < 1 || proizvod._cijena < 0)
			throw NedozvoljenaOperacija(__LINE__, "Jedan od parametara nije zadovoljavao.");

		strncpy_s(_sifra, proizvod._sifra, _TRUNCATE);

		_naziv = AlocirajNizKaraktera(proizvod._naziv);

		_cijena = proizvod._cijena;
		_kolicina = proizvod._kolicina;
		_popust = proizvod._popust;
	}


	Proizvod(const char* sifra, const char* naziv, double cijena, int kolicina)
	{
		//U slučaju nedozvoljenih vrijednosti za cijenu i količinu baciti izuzetak
		if (sifra == nullptr || naziv == nullptr || kolicina < 1 || cijena < 0)
			throw NedozvoljenaOperacija(__LINE__, "Jedan od parametara nije zadovoljavao.");
		
		strncpy_s(_sifra, sifra, _TRUNCATE);

		_naziv = AlocirajNizKaraktera(naziv);

		_cijena = cijena;
		_kolicina = kolicina;
		_popust = 0;
	}

	~Proizvod()
	{
		delete[] _naziv;
		_naziv = nullptr;
	}

	bool operator==(const Proizvod& proizvod) {
		return proizvod.GetSifra() == _sifra;
	}

	const char* GetSifra() const { return _sifra; }

	//Implementirati potrebne funkcije za rad sa klasom
	virtual void Info()
	{
		cout << "Sifra: " << _sifra << endl;
		cout << "Naziv: " << _naziv << endl;
		cout << "Cijena: " << _cijena << endl;
		cout << "Popust: " << _popust << endl;
		cout << "Kolicina: " << _kolicina << endl;
	}

	friend ostream& operator<<(ostream& cout, const Proizvod* proizvod) {
		cout << "Sifra: " << proizvod->_sifra << endl;
		cout << "Naziv: " << proizvod->_naziv << endl;
		cout << "Cijena: " << proizvod->_cijena << "KM" << endl;
		cout << "Popust: " << proizvod->_popust << "%" << endl;
		cout << "Kolicina: " << proizvod->_kolicina << endl;
		return cout;
	}
};

//Implementirati nasljeđivanje
class Odjeca : public Proizvod
{
	Kolekcija<char*> _velicine;
	Kolekcija<char*> _boje;
	char _kategorija[50];
public:
	//Potrebne konstruktor i destruktor funkcije
	Odjeca(Odjeca &odjeca) : Proizvod(odjeca) {//ne može const Odjeca
		strcpy_s(_kategorija, odjeca._kategorija);
		int vel = odjeca._boje.GetTrenutno();
		for (int i = 0; i < vel; i++)
			_boje.AddElement(AlocirajNizKaraktera(odjeca._boje[i]));
		vel = odjeca._velicine.GetTrenutno();
		for (int i = 0; i < vel; i++)
			_velicine.AddElement(AlocirajNizKaraktera(odjeca._velicine[i]));
	}

	Odjeca(const char* kategorija,const char* sifra, const char* naziv, double cijena, int kolicina): Proizvod(sifra, naziv, cijena, kolicina) {
		strncpy_s(_kategorija, kategorija, _TRUNCATE);
	}

	//Implementirati potrebne funkcije za rad sa klasom
	bool DodajVelicinu(const char* velicina) {
		int vel = _velicine.GetTrenutno();
		for (int i = 0; i < vel; i++)
			if (strcmp(velicina, _velicine[i]) == 0)
				return false;
		_velicine.AddElement(AlocirajNizKaraktera(velicina));
		return true;
	}

	bool DodajBoju(const char* boja) {
		int vel = _boje.GetTrenutno();
		for (int i = 0; i < vel; i++)
			if (strcmp(boja, _boje[i]) == 0)
				return false;
		_boje.AddElement(AlocirajNizKaraktera(boja));
		return true;
	}

	void Info() override
	{
		cout << _kategorija << endl;
		cout << "Boje: ";
		int vel = _boje.GetTrenutno();
		for (int i = 0; i < vel; i++)
			cout << _boje[i] << " | ";
		cout << endl;
		cout << "Velicine: ";
		vel = _velicine.GetTrenutno();
		for (int i = 0; i < vel; i++)
			cout << _velicine[i] << " | ";
		cout << endl;
		Proizvod::Info();
	}

	friend ostream& operator<<(ostream & COUT, Odjeca* odjeca) {
		COUT << "Kategorija: " << odjeca->_kategorija << endl;
		COUT << "Sifra: " << odjeca->_sifra << endl;
		COUT << "Naziv: " << odjeca->_naziv << endl;
		COUT << "Cijena: " << odjeca->_cijena << "KM" << endl;
		COUT << "Popust: " << odjeca->_popust << "%" << endl;
		COUT << "Kolicina: " << odjeca->_kolicina << endl;
		COUT << "Boje: ";
		int vel = odjeca->_boje.GetTrenutno();
		for (int i = 0; i < vel; i++)
			COUT << odjeca->_boje[i] << " | ";
		COUT << endl;
		COUT << "Velicine: ";
		vel = odjeca->_velicine.GetTrenutno();
		for (int i = 0; i < vel; i++)
			COUT << odjeca->_velicine[i] << " | ";
		COUT << endl;
		return COUT;
	}
};

class Katalog
{
	char* _naslov;
	char* _vrijediDo; //Datum u formatu dd.MM.yyyy
	Kolekcija<Proizvod*> _proizvodi;

	bool ProvjeriDatum(const char* vrijediDo) {
		int vel = strlen(vrijediDo);
		if (vel != 9 || vrijediDo[2] != '.' || vrijediDo[5] != '.')
			return false;
		for (int i = 0; i < vel; i++)
			if (i != 2 && i != 5 && !isdigit(vrijediDo[i]))
				return false;
		return true;
	}
public:
	//Potrebne konstruktor i destruktor funkcije
	Katalog(const char* naslov, const char* vrijediDo) {
		if (ProvjeriDatum(vrijediDo))
			throw NedozvoljenaOperacija(__LINE__, "Datum nije u formatu dd.MM.yyyy.");
		//U slučaju da datum ne ispunjava zadati format baciti izuzetak
		_naslov = AlocirajNizKaraktera(naslov);
		_vrijediDo = AlocirajNizKaraktera(vrijediDo);
	}

	~Katalog() {
		delete[] _naslov;
		_naslov = nullptr;
		delete[] _vrijediDo;
		_vrijediDo = nullptr;
		for (size_t i = 0; i < _proizvodi.GetTrenutno(); i++) {
			delete _proizvodi[i];
			_proizvodi[i] = nullptr;
		}
	}

	//Kreirati funkciju za dodavanje proizvoda u katalog i pri tome provjeriti da li se radi
	//o objektu izvedene ili osnovne klase.
	//Onemogućiti dodavanje identičnih proizvoda u jedan katalog (proizvode razlikovati samo na osnovu šifre).
	//U slučaju pokušaja dodavanja istih proizvoda baciti izuzetak.
	void DodajProizvodKatalogu(Proizvod *proizvod) {
		int vel = _proizvodi.GetTrenutno();
		for (int i = 0; i < vel; i++)
			if (*proizvod == *_proizvodi[i])
				throw NedozvoljenaOperacija(__LINE__, "Sifra proizvoda ne moze da bude dupla.");
		Odjeca* temp = dynamic_cast<Odjeca*>(proizvod);
		if (temp != nullptr)
			_proizvodi.AddElement(new Odjeca(*temp));//Komentar Muhamed: Jel moglo dugacije ? Mozda sa geterima?
		else
			_proizvodi.AddElement(new Proizvod(*proizvod));
	}

	//Funkciju za uklanjanje proizvoda iz kataloga na osnovu šifre.
	//Ukoliko se ne pronađe traženi proizvod baciti izuzetak.
	void UkloniProizvod(const char* sifra) {
		int vel = _proizvodi.GetTrenutno();
		for (int i = 0; i < vel; i++)
			if (strcmp(sifra, _proizvodi[i]->GetSifra()) == 0)
			{
				delete _proizvodi[i];
				return;
			}
		throw NedozvoljenaOperacija(__LINE__, "Sifra proizvoda nije pronadjena.");
	}


	//Preklopiti operator za ispis kataloške ponude
	friend ostream& operator<<(ostream & cout, Katalog& katalog) {
		cout << katalog._naslov << " - " << katalog._vrijediDo << endl;
		int vel = katalog._proizvodi.GetTrenutno();

		Odjeca *temp;
		for (int i = 0; i < vel; i++) {
			temp = dynamic_cast<Odjeca*>(katalog._proizvodi[i]);
			if (temp != nullptr)
				cout << temp << endl;
			else
				cout << katalog._proizvodi[i] << endl;
		}
		return cout;
	}
};

class Narudzba
{
	
	int _broj;
	char* _datumIsporuke; //Datum u formatu dd.MM.yyyy
	Kolekcija<Proizvod*> _naruceniProizvodi;
	bool otkazana;
public:
	//Potrebne konstruktor i destruktor funkcije
	//U slučaju da datum ne ispunjava zadati format baciti izuzetak.

	//Kreirati funkciju za dodavanje proizvoda narudžbe sa povratnom vrijednošću tipa bool.
	//Ukoliko proizvod više nije dostupan baciti izuzetak.
	//Dozvoliti dodavanje istog proizvoda više puta.

	//Funkciju za uklanjanje određenog proizvoda iz narudžbe. Voditi računa da narudžba može 
	//imati više puta isti proizvod.

	//Dodati funkciju za proračun ukupne cijene narudžbe.
	//Voditi računa o mogućnosti dodavanja više istih proizvoda (količina).
	//Uračunati popust u slučaju da je definisan.

	//Preklopiti operator za ispis podataka o narudžbi zajedno sa cijenom.
};

//U posljednjoj klasi samostalno prepoznati izuzetne situacije
class Prodavac
{
	char* _imePrezime;
	Kolekcija<Narudzba>* _narudzbe;
public:
	//Potrebne konstruktor i destruktor funkcije

	//Omogućiti dodavanje narudžbi za prodavača

	//Omogućiti otkazivanje narudžbe na osnovu njenog broja.

	//Ispis svih podataka o prodavaču i kratke informacije o
	//svim narudžbama (datum, broj proizvoda i cijena). Posebno izdvojiti otkazane narudžbe.

	//Implementirati metodu koja u svim aktivnim narudžbama pronalazi proizvod koji se najviše prodavao
	//sa informacijom o tome da li se radi o odjeći ili osnovnom proizvodu.

};

int main()
{
	//Dodati minimalno 5 proizvoda u katalog.
	Proizvod burek("001", "Burek", 2.5, 3);
	Proizvod sirnica("002", "Sirnica", 2.1, 2);
	Proizvod krofna("003", "Krofna", 0.75, 5);
	Proizvod kifla("004", "Kifla", 0.25, 10);
	Proizvod pica("005", "Pica", 1.5, 7);
	Odjeca majica("Odjeca","006", "Nike", 50, 1);
	majica.DodajVelicinu("22");
	majica.DodajVelicinu("25");
	majica.DodajVelicinu("31");
	majica.DodajBoju("Crna");
	majica.DodajBoju("Plava");
	majica.DodajBoju("Zelena");
	majica.Info();
	cout << crt;

	//Ispisati ponudu kupcu
	Katalog katalog("Akcijska ponuda pekare!", "31.12.2018");
	katalog.DodajProizvodKatalogu(&kifla);
	katalog.DodajProizvodKatalogu(&majica);
	katalog.DodajProizvodKatalogu(&burek);
	katalog.DodajProizvodKatalogu(&sirnica);
	
	cout << katalog << endl;

	//Omogućiti kreiranje narudžbe za jednog prodavača na osnovu izbora kupca.

	system("pause");

	return 0;
}

