#include <iostream>
using namespace std;

#pragma warning(disable:4996)
const char *crt = "\n-------------------------------------------\n";
enum eRazred { PRVI = 1, DRUGI, TRECI, CETVRTI };
const char* razred[] = { "Prvi", "Drugi", "Treci", "Cetvrti" };
const float minimalan_prosjek = 4.5;

char * AlocirajNizKaraktera(const char * sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int  _trenutno;
public:
	Kolekcija() {
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = 0;
	}

	Kolekcija(const Kolekcija<T1,T2>& kolekcija) {
		_trenutno = kolekcija.getTrenutno();
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T1[_trenutno];
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = kolekcija.getElement1(i);
			_elementi2[i] = kolekcija.getElement2(i);
		}
	}

	~Kolekcija() {
		delete[] _elementi1;
		delete[] _elementi2;
	}

	void AddElement(const T1& element1, const T2& element2) {
		T1 * t1 = new T1[_trenutno + 1];
		T2 * t2 = new T2[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
		{
			t1[i] = _elementi1[i];
			t2[i] = _elementi2[i];
		}
		delete[] _elementi1;
		delete[] _elementi2;

		t1[_trenutno] = element1;
		t2[_trenutno++] = element2;

		_elementi1 = t1;
		_elementi2 = t2;
	}

	//od najvece prema najmanjoj vrijednosti
	void SortOpadajuciByT2()
	{
		int l, vel = _trenutno - 1;
		for (int i = 0; i < vel; i++)
		{
			l = i;
			for (int j = i+1; j < _trenutno; j++)
				if (_elementi2[j] > _elementi2[l])
					l = j;
			if (l != i)
				swap(_elementi2[l], _elementi2[i]);
		}
	}

	void operator=(const Kolekcija<T1, T2>& kolekcija) {
		delete[] _elementi1;
		delete[] _elementi2;

		_trenutno = kolekcija.getTrenutno();
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T1[_trenutno];
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = kolekcija.getElement1(i);
			_elementi2[i] = kolekcija.getElement2(i);
		}
	}

	T1& getElement1(int lokacija) const { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) const { return _elementi2[lokacija]; }
	int getTrenutno() const { return _trenutno; }
	//void setTrenutno(const int& trenutno) { _trenutno = trenutno; }
	friend ostream& operator<< (ostream &COUT, Kolekcija &obj) {
		for (int i = 0; i < obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};

class DatumVrijeme {
	int *_dan, *_mjesec, *_godina, *_sati, *_minuti;
public:
	void operator=(const DatumVrijeme& datum) {
		*_dan = *datum._dan;
		*_mjesec = *datum._mjesec;
		*_godina = *datum._godina;
		*_sati = *datum._sati;
		*_minuti = *datum._minuti;
	}




	DatumVrijeme(const DatumVrijeme& datum) {
		_dan = new int(*datum._dan);
		_mjesec = new int(*datum._mjesec);
		_godina = new int(*datum._godina);
		_sati = new int(*datum._sati);
		_minuti = new int(*datum._minuti);
	}


	DatumVrijeme(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 0, int minuti = 0) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);
	}

	~DatumVrijeme() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;
	}
	friend ostream& operator<< (ostream &COUT, DatumVrijeme &obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina << " " << *obj._sati << ":" << *obj._minuti << endl;
		return COUT;
	}
};

class Predmet {
	char * _naziv;
	int _ocjena;
	char* _napomena;
public:

	Predmet(const Predmet& predmet):
		_naziv(AlocirajNizKaraktera(predmet._naziv)), 
		_ocjena(predmet._ocjena), 
		_napomena(AlocirajNizKaraktera(predmet._napomena)) {}

	void DodajNapomenu(const char* napomena)
	{
		int vel = strlen(_napomena) + strlen(napomena) + 2;
		char *temp = new char[vel];
		strcpy_s(temp, vel, _napomena);
		strcat_s(temp, vel, " ");
		strcat_s(temp, vel, napomena);
		delete _napomena;
		_napomena = temp;
	}

	Predmet(const char * naziv, int ocjena, const char* napomena = "") :_ocjena(ocjena) {
		_naziv = AlocirajNizKaraktera(naziv);
		_napomena = AlocirajNizKaraktera(napomena);
	}

	~Predmet() {
		delete[] _naziv; _naziv = nullptr;
		if (_napomena != nullptr) delete[] _napomena;
	}
	bool operator==(const Predmet &predmet) const {
		return strcmp(predmet._naziv, _naziv) == 0;
	}
	bool operator!=(const Predmet &predmet) const {
		return !(*this == predmet);
	}


	friend ostream& operator<< (ostream &COUT, Predmet &obj) {
		COUT << obj._naziv << " (" << obj._ocjena << ") " << obj._napomena << endl;
		return COUT;
	}
	char * GetNaziv() { return _naziv; }
	int GetOcjena() { return _ocjena; }
	char* GetNapomena() { return _napomena; }
};

//Uspjeh je ustvari razred. Jedan uspjeh(razred) sadrzi vise predmeta koje student slusa.
class Uspjeh {
	eRazred _razred;
	Kolekcija<Predmet* , DatumVrijeme> * _predmeti; //datumvrijeme se odnosi na vrijeme evidentiranja polozenog predmeta
public:

	void operator=(const Uspjeh& uspjeh)
	{
		_razred = uspjeh.GetRazred();
		delete _predmeti;
		_predmeti = new Kolekcija<Predmet*, DatumVrijeme>;
		int vel = uspjeh._predmeti->getTrenutno();
		for (int i = 0; i < vel; i++)
			_predmeti->AddElement(new Predmet(*uspjeh._predmeti->getElement1(i)), uspjeh._predmeti->getElement2(i));

	}

	Uspjeh(eRazred razred) :_razred(razred), _predmeti(new Kolekcija<Predmet*, DatumVrijeme>()) {}

	Uspjeh() {
		_razred = eRazred(1);
		_predmeti = new Kolekcija<Predmet*, DatumVrijeme>;
	}

	~Uspjeh() {
		for (int i = 0; i < _predmeti->getTrenutno(); i++)
			delete _predmeti->getElement1(i);
		delete _predmeti; _predmeti = nullptr;
	}

	Kolekcija<Predmet*, DatumVrijeme> * GetPredmeti() const { return _predmeti; }
	eRazred GetRazred() const { return _razred; }
	void SetRazred(const eRazred& razred) { _razred = razred; }

	friend ostream& operator<< (ostream &COUT, const Uspjeh &obj) {
		COUT << razred[obj._razred - 1] << *obj._predmeti << endl;
		return COUT;
	}
};

class Kandidat {
	char * _imePrezime;
	char* _brojTelefona;
	int _trenutno;
	Uspjeh * _uspjeh;
public:
	//vraca uspjeh kandidata ostvaren u prvom razredu
	float operator()(const eRazred& razred) {
		int suma = 0, vel = 1;
		for (int i = 0; i < _trenutno; i++)
			if (_uspjeh[i].GetRazred() == razred)
			{
				vel = _uspjeh->GetPredmeti()->getTrenutno();
				for (int j = 0; j < vel; j++)
					suma += _uspjeh->GetPredmeti()->getElement1(j)->GetOcjena();
			}
		return suma / (float)vel;
	}


	/*
	uspjeh (tokom srednjoskolskog obrazovanja) se dodaje za svaki predmet na nivou razreda.
	tom prilikom onemoguciti:
	- dodavanje vise od 6 predmeta za jedan razred
	- dodavanje istoimenih predmeta na nivou jednog razreda,
	razredi (predmeti ili uspjeh) ne moraju biti dodavani sortiranim redoslijedom (npr. prvo se moze dodati uspjeh za II
	razred, pa onda za I razred i sl.). Funkcija vraca true ili false u zavisnosti od (ne)uspjesnost izvrsenja.
	*/
	bool DodajPredmetKandidatu(const eRazred& razred, Predmet& predmet, const DatumVrijeme& datumVrijeme) {
		/*if (predmet.GetOcjena() < 6)
			return false;*/

		for (int i = 0; i < _trenutno; i++)
			if (_uspjeh[i].GetRazred() == razred)
			{
				if (_uspjeh[i].GetPredmeti()->getTrenutno() == 6)
					return false;
				else
					for (int j = 0; j < _uspjeh[i].GetPredmeti()->getTrenutno(); j++)
						if (*_uspjeh[i].GetPredmeti()->getElement1(j) == predmet)
							return false;
				_uspjeh[i].GetPredmeti()->AddElement(new Predmet(predmet), datumVrijeme);
				return true;
			}

		
		Uspjeh *temp = new Uspjeh[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
			temp[i] = _uspjeh[i];
		delete[] _uspjeh;
		temp[_trenutno].SetRazred(razred);
		temp[_trenutno++].GetPredmeti()->AddElement(new Predmet(predmet), datumVrijeme);
		_uspjeh = temp;
		return true;
	}


	Kandidat(const char * imePrezime, const char* brojTelefona) :_trenutno(0), _uspjeh(nullptr) {
		_imePrezime = AlocirajNizKaraktera(imePrezime);
		_brojTelefona = AlocirajNizKaraktera(brojTelefona);
	}

	~Kandidat() {
		delete[] _imePrezime; _imePrezime = nullptr;
		delete[] _uspjeh;
	}

	friend ostream& operator<< (ostream &COUT, Kandidat &obj) {
		COUT << obj._imePrezime << " " << obj._brojTelefona << endl;
		for (int i = 0; i < obj._trenutno; i++)
			COUT << obj._uspjeh[i] << endl;
		return COUT;
	}
	Uspjeh * GetUspjeh() { return _uspjeh; }

};

void main() {
	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URAÐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOÐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOCNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.
	****************************************************************************/

	DatumVrijeme temp,
		datum19062018_1015(19, 6, 2018, 10, 15),
		datum20062018_1115(20, 6, 2018, 11, 15),
		datum30062018_1215(30, 6, 2018, 12, 15),
		datum05072018_1231(5, 7, 2018, 12, 31),
		datum20062018_1115_Copy(datum20062018_1115);

	cout << datum20062018_1115;

	const int kolekcijaTestSize = 10;
	Kolekcija<int, int> kolekcija1;
	for (int i = 0; i < kolekcijaTestSize; i++)
		kolekcija1.AddElement(i + 1, i * i);
	cout << kolekcija1 << crt;

	Kolekcija<int, int> kolekcija2 = kolekcija1;
	cout << kolekcija2 << crt;

	Kolekcija<int, int> kolekcija3;
	kolekcija3 = kolekcija1;

	kolekcija3.SortOpadajuciByT2(); //od najvece prema najmanjoj vrijednosti
	cout << kolekcija3 << crt;


	//napomena se moze dodati i prilikom kreiranja objekta
	Predmet Matematika("Matematika", 5, "Ucesce na takmicenju!"), 
			Fizika("Fizika", 5), 
			Hemija("Hemija", 2), 
			Engleski("Engleski", 5);

	Fizika.DodajNapomenu("Pohvala za ostvareni uspjeh!"); // dodaje novu napomenu
	Fizika.DodajNapomenu("Pohvala za uspjeh na takmicenju!");
	//krajnji rezulat nakona dodavanja napomena: Pohvala za ostvareni uspjeh!; Pohvala za uspjeh na takmicenju!;
	cout << Fizika << endl;
	cout << Matematika << endl;

	Kandidat jasmin("Jasmin Azemovic", "033 281 172");
	Kandidat adel("Adel Handzic", "033 281 170");

	/*
	uspjeh (tokom srednjoskolskog obrazovanja) se dodaje za svaki predmet na nivou razreda.
	tom prilikom onemoguciti:
	- dodavanje vise od 6 predmeta za jedan razred
	- dodavanje istoimenih predmeta na nivou jednog razreda,
	razredi (predmeti ili uspjeh) ne moraju biti dodavani sortiranim redoslijedom (npr. prvo se moze dodati uspjeh za II
	razred, pa onda za I razred i sl.). Funkcija vraca true ili false u zavisnosti od (ne)uspjesnost izvrsenja.
	*/


	if (jasmin.DodajPredmetKandidatu(DRUGI, Fizika, datum20062018_1115))
		cout << "Fizika za DRUGI uspjesno dodana!" << crt;
	else
		cout << "Fizika za DRUGI nije dodana!" << crt;

	if (jasmin.DodajPredmetKandidatu(DRUGI, Hemija, datum30062018_1215))
		cout << "Hemija za DRUGI uspjesno dodana!" << crt;
	else
		cout << "Hemija za DRUGI nije dodana" << crt;

	if (jasmin.DodajPredmetKandidatu(PRVI, Engleski, datum19062018_1015)) //ocjena 5
		cout << "Engleski za PRVI uspjesno dodan!" << crt;
	else
		cout << "Engleski za PRVI nije dodan" << crt;


	if (jasmin.DodajPredmetKandidatu(PRVI, Matematika, datum20062018_1115)) //ocjena 5
		cout << "Matematika za PRVI uspjesno dodana!" << crt;
	else
		cout << "Matematika za PRVI nije dodana!" << crt;

	//ne treba dodati Matematiku jer je vec dodana u prvom razredu
	if (jasmin.DodajPredmetKandidatu(PRVI, Matematika, datum05072018_1231))
		cout << "Matematika za PRVI uspjesno dodana!" << crt;
	else
		cout << "Matematika za PRVI nije dodana!" << crt;

	if (jasmin.DodajPredmetKandidatu(PRVI, Fizika, datum20062018_1115_Copy)) //ocjena 5
		cout << "Fizika za PRVI uspjesno dodana!" << crt;
	else
		cout << "Fizika za PRVI nije dodana" << crt;

	cout << "Prosjecna ocjena Jasmina za PRVU godinu: " << jasmin(PRVI) << endl;//vraca uspjeh kandidata ostvaren u prvom razredu

	system("pause>0");
}